<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2020-06-22T00:25:28+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Race Chao</title><subtitle>欢迎来到我的小小站点， 不定期给大家分享一些开发的小知识 &lt;a href=&quot;https://github.com/alfred&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@github&lt;/a&gt;.</subtitle><author><name>racechao</name><email>racechao@gmail.com</email></author><entry><title type="html">2020年如何搭建一个适合自己的 blog</title><link href="http://localhost:4000/build-my-blog/" rel="alternate" type="text/html" title="2020年如何搭建一个适合自己的 blog" /><published>2020-06-21T21:34:00+08:00</published><updated>2020-06-21T21:34:00+08:00</updated><id>http://localhost:4000/build-my-blog</id><content type="html" xml:base="http://localhost:4000/build-my-blog/">&lt;p&gt;&lt;img src=&quot;/build-my-blog/andrew-neel-unsplash.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经历了两天的折腾终于把我的博客搭建成功了👏🧨。
整个过程虽然踩了很多坑，但最终的结果很令我满意，而且这个过程也是一个非常值得分享的事情。先简单介绍下我的博客主要使用 Jekyll + Github + Netlify + VSCode（用来写 Markdown）的框架来搭建，然后就直接上正菜吧！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;直白的“来承上启下”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;静态网站生成器&quot;&gt;静态网站生成器&lt;/h2&gt;

&lt;p&gt;都 2020 年了，搭建一个博客当然是非常简单的事情。不需要什么复杂的框架，也不需要购买服务器，直接把生成静态文件丢到 CDN 就好了，性能又高，维护成本又低，而且更加安全。当然如果要自己搭服务器当然也可以，但国内的环境我就不说了，备案各种事情会让你崩溃，可以看下之前公司小伙伴&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;萌哥&lt;/code&gt;的辛酸史 &lt;a href=&quot;https://mengtnt.com/2020/02/11/submit-domain.html&quot;&gt;申请域名的艰难之路&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;继续说说静态网站生成器，这个名词很早就有了，感兴趣的小伙伴可以听下 &lt;a href=&quot;https://pan.icu/3&quot;&gt;内核恐慌的这期&lt;/a&gt; 节目。现在大多的开源博客软件都用到了之类的技术，这种方案其实就是之前比较火的 &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMStack&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JAMStack（JAM 代表 &lt;strong&gt;J&lt;/strong&gt;avaScript，&lt;strong&gt;A&lt;/strong&gt;PI 和 &lt;strong&gt;M&lt;/strong&gt;arkup）是一种使用 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.staticgen.com/&quot;&gt;Static Site Generators&lt;/a&gt; (SSG) 技术、不依赖 &lt;strong&gt;Web Server&lt;/strong&gt; 的前端架构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目前比较流行的博客搭建框架有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll, Hugo, Nuxt, Next, Gatsby&lt;/code&gt;，至于我为什么用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; 呢？其实我自己也没有仔细横向比对过，主要原因可能是我比较喜欢 Ruby 这门语言吧（确切的说应该是 ruby 社区的开源精神/文化）。之前看喵神也把博客迁回了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; 所以就毫不犹豫选了它。&lt;/p&gt;

&lt;h2 id=&quot;数据管理和迁移&quot;&gt;数据管理和迁移&lt;/h2&gt;

&lt;p&gt;以前很多小伙伴用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WordPress&lt;/code&gt; 去搭建博客，既要架服务器，又要搭建数据库，一旦需要迁移站点就非常痛苦，你一波骚操作有可能把辛苦写的文章数据都删除了。但因为我们使用的是 JAMStack 方案，根本不存在数据库，而且所有文章都有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; 提交记录（除非你把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; 项目删了），所以不太可能丢数据。迁移的时候只要简单的 Copy/Poast 相关文章的文件就可以了。&lt;/p&gt;

&lt;h2 id=&quot;流程自动化&quot;&gt;流程自动化&lt;/h2&gt;

&lt;p&gt;由于我们使用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;静态网站生成器&lt;/code&gt;每次写完文字都需要运行一遍 build 命令(比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;)重新生成一遍静态资源。所以就需要把这些重复的流程自动化，也就是 CI 自动部署。我用的是 Netlify 的免费版（300 次 build 的免费额度对于我这个可能月更的博客站点完全够用了），而且配置非常简单：直接向 Github 授权，然后选择你的 blog 项目就可以了，如果你项目使用了 Jekyll ，Netlify 会自动识别到，并且默认就帮你配置好了 Build 选项，简直黑科技！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;netlify-build.png&quot; alt=&quot;netlify-build&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然我们也可以使用 &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/github-actions/&quot;&gt;Github Action&lt;/a&gt; 来做 CI 也很香。这样我们写完博客直接往 Github 上一提交，系统就自动帮我们生成好静态资源并部署到 CDN 上了。&lt;/p&gt;

&lt;h2 id=&quot;评论系统&quot;&gt;评论系统&lt;/h2&gt;
&lt;p&gt;之前看到很多博客站使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt; 虽然集成也方便，但是广告多加载又慢，当我看到 &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt; 这个开源工具就爱上了，果断放弃 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utterances&lt;/code&gt;是一款基于 GitHub issues 的评论工具，优点如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;轻量&lt;/li&gt;
  &lt;li&gt;加载非常快&lt;/li&gt;
  &lt;li&gt;配置简单&lt;/li&gt;
  &lt;li&gt;这种 ✨✨设计风格的 logo 很符合我的胃口&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;静态资源托管&quot;&gt;静态资源托管&lt;/h2&gt;
&lt;p&gt;因为我们的网站是托管在 CDN 上的，访问速度的快慢主要就依赖你所托管的 CDN 服务商的速度，所以如果我们想优化国内的访问速度就需要尽量选择国内的托管服务（可惜好像没有特别好的）。&lt;/p&gt;

&lt;h2 id=&quot;mobile-design-first&quot;&gt;Mobile Design First&lt;/h2&gt;
&lt;p&gt;另外在提一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mobile Design First&lt;/code&gt; ，在找一些主题的过程中发现很多主题都使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mobile Design First&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;具体你可以参考这里:
&lt;a href=&quot;https://github.com/lmk123/blog/issues/55&quot; target=&quot;_blank&quot; rel=&quot;&quot;&gt;介绍一些免费好用的静态网站托管服务&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;整个过程搭建完毕，然后我们只要打开熟悉的 VSCode 安装上 markdown 插件就可以愉快的写博客啦。&lt;/p&gt;

&lt;p&gt;当然如果你想更加深度定制你的 blog 网站，作为一个程序员👨‍💻‍肯定难不倒你，我们可以基于一些开源的 Theme 上做适当的修改，比如加一个侧边栏，给头像增加一点动效等（笔者也在这个主题上定制了一些自己的需求并且提交了 PR）。另外我们也可以用一些 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serverless&lt;/code&gt; 的服务比如 &lt;a href=&quot;https://cloud.google.com/functions&quot;&gt;google cloud function&lt;/a&gt; 用来弥补我们没有后端的尴尬场面，具体需求就靠大家自由发挥才智了。&lt;/p&gt;

&lt;p&gt;推荐一些相关资源：
&lt;a href=&quot;https://jamstackthemes.dev/ssg/jekyll/&quot;&gt;Jekyll Themes&lt;/a&gt;&lt;/p&gt;</content><author><name>racechao</name></author><category term="Jekyll" /><category term="Netlify" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/build-my-blog/andrew-neel-unsplash.jpg" /><media:content medium="image" url="http://localhost:4000/build-my-blog/andrew-neel-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">iOS Keyboard Extension Tips</title><link href="http://localhost:4000/keyboard-extension-tips/" rel="alternate" type="text/html" title="iOS Keyboard Extension Tips" /><published>2020-06-19T22:34:00+08:00</published><updated>2020-06-19T22:34:00+08:00</updated><id>http://localhost:4000/keyboard-extension-tips</id><content type="html" xml:base="http://localhost:4000/keyboard-extension-tips/">&lt;p&gt;&lt;img src=&quot;keyboard.jpg&quot; alt=&quot;keyboard_architecture_2x.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apple 在 iOS 8 里就引入了 Keyboard Extension，但网上相关但开发但资料很少，我在开发中也遇到了不少坑，为了给大家分享下这方面但知识，所以才有了这篇文章。
Custom Keyboard 要实现起来也非常简单，我们只需要在项目里新建一个 Custom Keyboard Extension 的 Target，Xcode 就自动会给我们创建一个 KeyboardViewController，开发者通过这个类就可以做简单的开发了。但是往往实际情况并没有那么简单。我们可能需要在键盘请求网络数据，或者和Containing App 通信等等，这时我们会遇到很多问题。这边文章我会讲述一下常见的问题和解法。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Extension 如何通讯&lt;/li&gt;
  &lt;li&gt;检测键盘是否已经添加&lt;/li&gt;
  &lt;li&gt;检测键盘是否激活&lt;/li&gt;
  &lt;li&gt;播放系统声音&lt;/li&gt;
  &lt;li&gt;检测是否已经获取（最高访问权限） RequestsOpenAccess&lt;/li&gt;
  &lt;li&gt;键盘切换方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extension-如何通讯&quot;&gt;Extension 如何通讯&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;open-url.jpg&quot; alt=&quot;detailed_communication_2x.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是苹果官方给出的一张图，Containing App 是我们的主 App, Host app 是 Extension 所运行的第三方 App（比如微信），为了方便理解下面我们会把 Containing App 称为“主 App”，Host App 称为“第三方 App”。&lt;/p&gt;

&lt;p&gt;总结如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;App extension 无法直接与主 App 通信（简单的理解它们就是两个不同的进程，extension 启动了并不代表主App也会启动）&lt;/li&gt;
  &lt;li&gt;App extension 可以通过 open URL 和主 App通信，但这条链路只是单向的（因为App extension 没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openURL&lt;/code&gt;  之类接受消息的入口）&lt;/li&gt;
  &lt;li&gt;主 App 和 App extension 可以通过读写共同的文件资源来通信（比如 UserDefault, 前提需要加到同一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppGroups&lt;/code&gt; ）&lt;/li&gt;
  &lt;li&gt;另外一个官方没提到的方法：可以用更底层的 DarwinNotify 来建立 Extension 和 Containing app 之间的通讯，可以参考下面的👇开源库&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/choefele/CCHDarwinNotificationCenter&quot;&gt;choefele/CCHDarwinNotificationCenter&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过 App Groups 共同维护 UserDefault 是一种比较简单的通讯方法。但是开发者也需要注意的是如果我们的键盘没有获取到没有完全访问权限，键盘是只能读取，没法修改 UserDefault 的值的（如果这个 UserDefault 是 Containing app 创建的）。另外一点是 DarwinNotify 现在同样也需要完全访问权限了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后给大家一个忠告： 千万一定要在真机上调试！&lt;/p&gt;

&lt;h3 id=&quot;检测键盘是否已经添加&quot;&gt;检测键盘是否已经添加&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isKeyboardEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keyboards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserDefaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AppleKeyboards&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyboards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你的 extension bundle id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;检测键盘是否已经激活&quot;&gt;检测键盘是否已经激活&lt;/h3&gt;

&lt;p&gt;键盘类型的应用往往有个需求是：当用户第一次切换到我们开发的 Keyboard，需要在主 App 显示欢迎👏图文或者开启引导流程。我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openURL&lt;/code&gt; 的方式来通知主App。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Step1: 在 keyboard 中调用&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 打开主APP，比如 openURL(scheme:&quot;yourAppScheme://actived&quot;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSExtensionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;responder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selectorOpenURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sel_registerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;openURL:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectorOpenURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectorOpenURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// step2:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// app 在前台的时候接收通知&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
               &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;OpenURLOptionsKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yourAppScheme&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;actived&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里要注意的是openURL 会唤起主 App（如果主 App 不在前台），所以这里需要额外做判断。&lt;/p&gt;

&lt;h3 id=&quot;播放系统声音&quot;&gt;播放系统声音&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 直接上代码&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 点击: SystemSoundID = 1123&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 删除按钮: SystemSoundID = 1155&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 系统键盘: SystemSoundID = 1156&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;AudioServicesPlaySystemSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SystemSoundID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;检测是否已经获取最高访问权限-requestsopenaccess&quot;&gt;检测是否已经获取（最高访问权限） RequestsOpenAccess&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Keyboard Extension&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasFullAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 11.0, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasFullAccess&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// super is UIInputViewController.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 10.0, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPasteboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIPasteboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPasteboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasStrings&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;UIPasteboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPasteboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPasteboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主 App 没有直接获取的方法，但我们可以通过上面提到的通讯方法，在 Keyboard Extension 中把状态传过去&lt;/p&gt;

&lt;h3 id=&quot;全面屏幕隐藏切换-keyboard-按键&quot;&gt;全面屏幕隐藏切换 keyboard 按键&lt;/h3&gt;

&lt;p&gt;在全屏但设备系统会给我们默认提供切换键盘但按钮，所以我们开发的键盘就不需要提供此按钮了，我们可以通过以下方式来判断：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// needsInputModeSwitchKey&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;needsSwitchKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOSApplicationExtension 11.0, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needsInputModeSwitchKey&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他资料&quot;&gt;其他资料&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/CustomKeyboard.html#//apple_ref/doc/uid/TP40014214-CH16-SW4&quot;&gt;Custom Keyboard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/ios/extensions/custom-keyboards/&quot;&gt;Custom Keyboards - Extensions - iOS - Human Interface Guidelines - Apple Developer&lt;/a&gt;&lt;/p&gt;</content><author><name>racechao</name></author><category term="ios" /><category term="keyboard extension" /><summary type="html"></summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/hello-world/" rel="alternate" type="text/html" title="Hello World" /><published>2020-06-18T00:34:00+08:00</published><updated>2020-06-18T00:34:00+08:00</updated><id>http://localhost:4000/hello-world</id><content type="html" xml:base="http://localhost:4000/hello-world/">&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>racechao</name></author><summary type="html">#include &amp;lt;stdio.h&amp;gt; int main() { printf(&quot;Hello, World!&quot;); return 0; }</summary></entry></feed>